defmodule Euler02 do

  @doc """
  Each new term in the Fibonacci sequence is generated by
  adding the previous two terms.
  By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do
  not exceed four million, find the sum of the even-valued terms.
  ---
  Explores handling state with processes by implementing a producer-pattern.
  """
  def run do
    producer = spawn_link(fn -> fib_state(1, 2) end)
    even? = &(rem(&1, 2) == 0)
    res = sum_producer(0, 4000000, even?, producer)
    send producer, {self(), :exit}
    res
  end

  @doc """
  Sums the values returned by the producer.
  Only adds them to the result if they fulfill the predicate set by &guard/1.
  Returns the sum once the next value produced by the handle is bigger than max.
  """
  def sum_producer(sum, max, guard, producer) do
    send producer, {self(), :next}
    next = receive do n -> n end
    if next > max do
      sum
    else
      sum_producer((if guard.(next), do: sum + next, else: sum), max, guard, producer)
    end
  end

  @doc """
  When the process this is being run in receives a message in the form of
  {caller, :next}, this produces the next fibonacci number based on the previous ones (n1, n2),
  so it works like a producer.
  Stops recurring when it receives a message in the form of {caller, :exit}.
  """
  def fib_state(n1, n2) do
    receive do
      {caller, :next} ->
        send caller, n1
        fib_state(n2, n1 + n2)
      {caller, :exit} ->
        send caller, {:exit, n1, n2}
    end
  end

end
